Dynamic vector right now is implemented with a begin and end pointer. Adding a
capacity vector would allow:
    - Default initialization (we could remove the two constructors in static_array)
    - Dynamic size within some bounds, which is interesting if simulations would
      require growing or shrinking their size.
But would:
    - Just be a worse implementation of std::vector
Ill just try to make the code compatible with std::vector, which can also
accept allocators

Maybe add specializations for adding and multiplying by 0? Just return the other
operand or return a 0. Would make sense for some rk methods where some b_i is 0.
Also, this if statements only happens when building an expr object, this
construction would e bypassed, and the logic would still hold I believe. We need
benchmarks for this, and tests.


TODO:
I think i need destructors in the arrays unfortunately
Propper initialization also std::uninitalized fill
https://en.cppreference.com/w/cpp/types/aligned_storage
